# The services here need to run as root and require root permissions on their data volumes
# A sample
# install -d -o root -g root ../data/db/postgres && install -d -o root -g root ../data/db/prometheus && install -d -o root -g root ../data/db/redis
name: db

services:
  # Needs to run as root
  # Run the below for fixing permission issue(may be run only chown if needed)
  # rm -rf ../data/postgres/ && mkdir -p ../data/postgres/ && chown -R 999:999 ../data/postgres
  postgres:
    image: postgres
    container_name: postgres
    hostname: postgres
    restart: unless-stopped
    networks:
      server_network:
        ipv4_address: ${POSTGRES_IPV4}
        ipv6_address: ${POSTGRES_IPV6}
    ports:
      - "5432:5432"
    volumes:
      - ${POSTGRES_DATA_PATH}:/var/lib/postgresql/data
      - ./scripts/sql/:/docker-entrypoint-initdb.d:ro
    environment:
      TZ: ${TZ}
      POSTGRESQL_VOLUME_DIR: "/postgresql"
      POSTGRES_INITDB_ARGS: '--data-checksums'
      POSTGRES_USER: ${POSTGRES_SU_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_SU_PASSWORD}
      POSTGRES_DB: ${POSTGRES_SU_DATABASE_NAME}
      BLOCKY_USERNAME: ${POSTGRES_BLOCKY_USERNAME}
      BLOCKY_PASSWORD: ${POSTGRES_BLOCKY_PASSWORD}
      BLOCKY_DATABASE_NAME: ${POSTGRES_BLOCKY_DATABASE_NAME}
    healthcheck:
      test:
        - "CMD-SHELL"
        - |
          pg_isready -U ${POSTGRES_SU_USERNAME} &&
          psql -U ${POSTGRES_SU_USERNAME} -d ${POSTGRES_SU_DATABASE_NAME} -c "
            SELECT 1 FROM pg_database WHERE datname='${POSTGRES_BLOCKY_DATABASE_NAME}'
          " | grep -q 1 &&
          psql -U ${POSTGRES_SU_USERNAME} -d ${POSTGRES_SU_DATABASE_NAME} -c "
            SELECT 1 FROM pg_roles WHERE rolname='${POSTGRES_BLOCKY_USERNAME}'
          " | grep -q 1
      start_period: 3s
      interval: 30s
      timeout: 5s
      retries: 3
    shm_size: 128mb

  # Needs to run as root
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    hostname: prometheus
    restart: unless-stopped
    networks:
      server_network:
        ipv4_address: ${PROMETHEUS_IPV4}
        ipv6_address: ${PROMETHEUS_IPV6}
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      # - prom-data:/prometheus
      - ${PROMETHEUS_DATA_PATH}:/prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.lan`)"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "-q",
          "--tries=1",
          "--spider",
          "http://localhost:9090/-/healthy"
        ]
      start_period: 1s
      interval: 30s
      timeout: 5s
      retries: 3

  # Needs to run as root
  redis:
    image: redis
    container_name: redis
    hostname: redis
    restart: unless-stopped
    networks:
      server_network:
        ipv4_address: ${REDIS_IPV4}
        ipv6_address: ${REDIS_IPV6}
    ports:
      - "6379:6379"
    volumes:
      - .${REDIS_DATA_PATH}:/data
    environment:
      TZ: ${TZ}
      REDIS_VOLUME_DIR: /redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command:
      - /bin/sh
      - -c
      - redis-server --requirepass "${REDIS_PASSWORD}"
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      start_period: 1s
      interval: 30s
      timeout: 5s
      retries: 3

networks:
  server_network:
    name: server_network
    external: true

volumes:
  prom-data:
