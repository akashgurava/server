name: server

services:

  # Healthcheck is done by dockerfile itself
  blocky:
    image: spx01/blocky:latest
    container_name: blocky
    hostname: blocky
    user: "1000:1000"
    restart: unless-stopped
    network_mode: host
    volumes:
      - ./blocky/config.yml:/app/config.yml
    depends_on:
      postgres:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.blocky.rule=Host(`blocky.lan`)"
      - "traefik.http.services.blocky.loadbalancer.server.port=4000"
    environment:
      - TZ=${TZ}

  # Needs to run as root
  traefik:
    image: traefik:latest
    container_name: traefik
    hostname: traefik
    restart: unless-stopped
    networks:
      server_network:
        ipv4_address: 172.18.0.2
        ipv6_address: 2001:db8:1::2
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yaml:/etc/traefik/traefik.yaml:ro
      - ./traefik/letsencrypt:/letsencrypt
    environment:
      - TZ=${TZ}
    depends_on:
      blocky:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.lan`)"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
    healthcheck:
      test: [ "CMD", "traefik", "healthcheck", "--ping" ]
      start_period: 10s
      interval: 30s
      timeout: 10s
      retries: 3
    extra_hosts:
      - host.docker.internal:172.17.0.1

  # Needs to run as root
  redis:
    image: docker.io/bitnami/redis
    container_name: redis
    hostname: redis
    restart: unless-stopped
    networks:
      server_network:
        ipv4_address: 172.18.0.4
        ipv6_address: 2001:db8:1::4
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/redis/data
    environment:
      TZ: ${TZ}
      REDIS_VOLUME_DIR: /redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      start_period: 1s
      interval: 30s
      timeout: 5s
      retries: 3

  # Needs to run as root
  postgres:
    image: postgres:latest
    container_name: postgres
    hostname: postgres
    restart: unless-stopped
    networks:
      server_network:
        ipv4_address: 172.18.0.5
        ipv6_address: 2001:db8:1::5
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data/
      - ./scripts/sql/:/docker-entrypoint-initdb.d:ro
    environment:
      TZ: ${TZ}
      POSTGRES_INITDB_ARGS: '--data-checksums'
      POSTGRES_USER: ${POSTGRES_SU_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_SU_PASSWORD}
      POSTGRES_DB: ${POSTGRES_SU_DATABASE_NAME}
      BLOCKY_USERNAME: ${POSTGRES_BLOCKY_USERNAME}
      BLOCKY_PASSWORD: ${POSTGRES_BLOCKY_PASSWORD}
      BLOCKY_DATABASE_NAME: ${POSTGRES_BLOCKY_DATABASE_NAME}
    healthcheck:
      test:
        - "CMD-SHELL"
        - |
          pg_isready -U ${POSTGRES_SU_USERNAME} &&
          psql -U ${POSTGRES_SU_USERNAME} -d $POSTGRES_SU_DATABASE_NAME -c "
            SELECT 1 FROM pg_roles WHERE rolname='$POSTGRES_BLOCKY_USERNAME'
          " | grep -q 1 &&
          psql -U ${POSTGRES_SU_USERNAME} -d $POSTGRES_SU_DATABASE_NAME -c "
            SELECT 1 FROM pg_database WHERE datname='$POSTGRES_BLOCKY_DATABASE_NAME'
          " | grep -q 1
      start_period: 3s
      interval: 30s
      timeout: 5s
      retries: 3
    shm_size: 128mb

  pgweb:
    image: sosedoff/pgweb:latest
    container_name: pgweb
    hostname: pgweb
    user: "1000:1000"
    restart: unless-stopped
    networks:
      server_network:
        ipv4_address: 172.18.0.6
        ipv6_address: 2001:db8:1::6
    ports:
      - 8081:8081
    environment:
      PGWEB_DATABASE_URL: "postgres://${POSTGRES_SU_USERNAME}:${POSTGRES_SU_PASSWORD}@172.18.0.5:5432/postgres?sslmode=disable"
    depends_on:
      postgres:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgweb.rule=Host(`pgweb.lan`)"
      - "traefik.http.services.pgweb.loadbalancer.server.port=8081"
    healthcheck:
      test: [ "CMD", "nc", "-vz", "127.0.0.1", "8081" ]
      start_period: 1s
      interval: 30s
      timeout: 5s
      retries: 3

  # Needs to run as root
  node_exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    hostname: node_exporter
    restart: unless-stopped
    network_mode: host
    pid: host
    volumes:
      - '/:/host:ro,rslave'
    command:
      - '--path.rootfs=/host'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.node-exporter.rule=Host(`node-exporter.lan`)"
      - "traefik.http.services.node-exporter.loadbalancer.server.port=9100"
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider http://localhost:9100/ || exit 1"
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  # Needs to run as root
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    hostname: cadvisor
    restart: unless-stopped
    networks:
      server_network:
        ipv4_address: 172.18.0.8
        ipv6_address: 2001:db8:1::8
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cadvisor.rule=Host(`cadvisor.lan`)"
      - "traefik.http.services.cadvisor.loadbalancer.server.port=8080"
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg

  # Needs to run as root
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    hostname: prometheus
    restart: unless-stopped
    networks:
      server_network:
        ipv4_address: 172.18.0.9
        ipv6_address: 2001:db8:1::9
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.lan`)"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "-q",
          "--tries=1",
          "--spider",
          "http://localhost:9090/-/healthy"
        ]
      start_period: 1s
      interval: 30s
      timeout: 5s
      retries: 3

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    hostname: grafana
    user: "1000:1000"
    restart: unless-stopped
    networks:
      server_network:
        ipv4_address: 172.18.0.10
        ipv6_address: 2001:db8:1::10
    volumes:
      - ../data/grafana:/var/lib/grafana
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.lan`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "-q",
          "--tries=1",
          "--spider",
          "http://localhost:3000/api/health"
        ]
      start_period: 10s
      interval: 30s
      timeout: 5s
      retries: 3

  glances-web:
    image: nicolargo/glances:latest
    container_name: glances-web
    privileged: true
    restart: always
    pid: host
    networks:
      server_network:
        ipv4_address: 172.18.0.11
        ipv6_address: 2001:db8:1::11
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # Uncomment the below line if you want glances to display host OS detail instead of container's
      - /etc/os-release:/etc/os-release:ro
      - "./glances/glances.conf:/glances/conf/glances.conf"
    environment:
      - "GLANCES_OPT=--config /glances/conf/glances.conf -w"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.glances.rule=Host(`glances.lan`)"
      - "traefik.http.services.glances.loadbalancer.server.port=61208"

  glances-prom:
    image: nicolargo/glances:latest-full
    container_name: glances-prom
    privileged: true
    restart: always
    pid: host
    networks:
      server_network:
        ipv4_address: 172.18.0.12
        ipv6_address: 2001:db8:1::12
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # Uncomment the below line if you want glances to display host OS detail instead of container's
      - /etc/os-release:/etc/os-release:ro
      - "./glances/glances.conf:/glances/conf/glances.conf"
    environment:
      - "GLANCES_OPT=--config /glances/conf/glances.conf --export prometheus"

# image: Specifies the Docker image to use for the service
# build: Specifies the path to a directory containing a Dockerfile to build the image
# container_name: Specifies the name for the container
# hostname: Specifies the hostname of the container
# user: Specifies the user or UID:GID to run the container as
# restart: Specifies restart policy
# network_mode: Specifies the network mode for the container
# networks: Specifies networks to connect the service to
# ports: Specifies ports to expose from the container (host_port:container_port)
# volumes: Specifies volumes to mount into the container (host_path:container_path)
# environment: Specifies environment variables
# env_file: Specifies an environment file to read environment variables from
# depends_on: Specifies dependencies on other services
# labels: Specifies metadata as key-value pairs
# command: Overrides the default command for the image
# healthcheck: Specifies a health check for the container
# shm_size: Specifies the size of /dev/shm for the container
# image, build, container_name, hostname, user, restart, network_mode, networks, ports
# volumes, environment, env_file, depends_on, labels, command, healthcheck, shm_size

networks:
  server_network:
    name: server_network
    driver: bridge
    enable_ipv6: true
    ipam:
      driver: default
      config:
        - subnet: 172.18.0.0/16
        - subnet: 2001:db8:1::/64

volumes:
  redis-data:
    name: redis
  postgres-data:
    name: postgres
  prometheus-data:
    name: prometheus
